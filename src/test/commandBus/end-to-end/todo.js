const { CommandBus } = require('simple-command-bus');
const { ClassNameExtractor, ClassNameInflector, CommandHandlerMiddleware } = require('simple-command-bus/lib/middlewares');
const { InMemoryLocator } = require('simple-command-bus/lib/locators');
const { LoggerMiddleware } = require('simple-command-bus/lib/loggers');
const { CreateTodoCommand } = require('./createTodoCommand');
const { TodoHandler } = require('./todoHandler');
const { TodoService } = require('./todoService');

describe('Todo command bus', () => {
  let commandBus;

  beforeAll(() => {
    // Create a new command bus with the necessary middleware and handlers
    const handler = new TodoHandler(new TodoService(/* pass in a mock repository */));
    commandBus = new CommandBus([
      new LoggerMiddleware(console),
      new CommandHandlerMiddleware(
        new ClassNameExtractor(),
        new InMemoryLocator({
          CreateTodoHandler: handler,
          // Add other handlers for the other commands here
        }),
        new ClassNameInflector()
      )
    ]);
  });

  it('should create a new todo', async () => {
    // Create a new CreateTodoCommand with the necessary properties
    const command = new CreateTodoCommand('My Todo', 'This is my todo', 'incomplete', 123);

    // Send the command to the command bus
    const createdTodo = await commandBus.handle(command);

    // Verify that the todo was created with the correct properties
    expect(createdTodo).toEqual({
      id: expect.any(Number), // The ID will be generated by the repository
      title: 'My Todo',
      description: 'This is my todo',
      status: 'incomplete',
      userId: 123
    });
  });

  
});
